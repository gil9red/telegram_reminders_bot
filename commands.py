#!/usr/bin/env python3
# -*- coding: utf-8 -*-

__author__ = "ipetrash"


from datetime import datetime, tzinfo, timezone

from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
from telegram.ext import (
    CallbackContext,
    CallbackQueryHandler,
    Dispatcher,
    CommandHandler,
    MessageHandler,
    Filters,
)
from telegram.error import BadRequest

from common import (
    log,
    datetime_to_str,
    prepare_text,
    get_int_from_match,
    convert_tz,
    get_tz,
)
from bot_utils import log_func, reply_error, get_blockquote_html
from db import Reminder, Chat, User

from parser import (
    ParseResult,
    Defaults,
    RepeatEvery,
    parse_command,
    get_nearest_datetime,
)
from regexp_patterns import (
    COMMAND_START,
    COMMAND_HELP,
    COMMAND_ADD,
    COMMAND_TZ,
    COMMAND_LIST,
    PATTERN_LIST,
    PATTERN_REMINDER_PAGE,
    PATTERN_DELETE,
    fill_string_pattern,
)
from third_party.telegram_bot_pagination import InlineKeyboardPaginator
from third_party.is_equal_inline_keyboards import is_equal_inline_keyboards


INLINE_BUTTON_TEXT_DELETE: str = "‚ùå –£–¥–∞–ª–∏—Ç—å"


def get_context_value(context: CallbackContext) -> str | None:
    try:
        # –ó–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∏–∑ —Ä–µ–≥—É–ª—è—Ä–∫–∏
        if context.match:
            return context.match.group(1)

        # –ó–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –∫–æ–º–∞–Ω–¥—ã
        return " ".join(context.args)

    except:
        return


def send_reminder(
    bot: Bot,
    chat: Chat,
    reminder: Reminder,
    message_id: int,
    reply_markup: str | None,
    as_new_message: bool = True,
):
    chat_id: int = chat.id

    target_datetime_utc = reminder.target_datetime_utc
    target_datetime = reminder.get_target_datetime()

    next_send_datetime_utc = reminder.next_send_datetime_utc
    next_send_datetime = reminder.get_next_send_datetime()

    repeat_every: RepeatEvery | None = reminder.get_repeat_every()

    lines: list[str] = [
        "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:",
        get_blockquote_html(reminder.target),
        f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {datetime_to_str(target_datetime)} (–≤ UTC {datetime_to_str(target_datetime_utc)})",
        f"–ë–ª–∏–∂–∞–π—à–µ–µ: {datetime_to_str(next_send_datetime)} (–≤ UTC {datetime_to_str(next_send_datetime_utc)})",
        f"–ü–æ–≤—Ç–æ—Ä: {repeat_every.get_value() if repeat_every else '–Ω–µ—Ç'}",
    ]

    repeat_before = reminder.get_repeat_before()
    if not repeat_before:
        lines.append("–ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    else:
        tz_chat: tzinfo = chat.get_tz()

        lines.append("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:")

        for time_unit in repeat_before:
            prev_dt = time_unit.get_prev_datetime(target_datetime)
            prev_dt_utc = convert_tz(
                dt=prev_dt,
                from_tz=tz_chat,
                to_tz=timezone.utc,
            )
            lines.append(
                f"    {time_unit.get_value()}: {prev_dt} (–≤ UTC {datetime_to_str(prev_dt_utc)})"
            )

    lines.append(
        f"\n–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n"
        + get_blockquote_html(reminder.original_message_text)
    )

    text: str = prepare_text("\n".join(lines))
    parse_mode: str = ParseMode.HTML

    if as_new_message:
        bot.send_message(
            chat_id=chat_id,
            text=text,
            parse_mode=parse_mode,
            reply_markup=reply_markup,
            reply_to_message_id=message_id,
        )
    else:
        bot.edit_message_text(
            chat_id=chat_id,
            text=text,
            parse_mode=parse_mode,
            reply_markup=reply_markup,
            message_id=message_id,
        )


def get_reminders(update: Update, context: CallbackContext):
    query = update.callback_query
    if query:
        query.answer()

    message = update.effective_message
    chat = Chat.get_from(update.effective_chat)

    page: int = get_int_from_match(context.match, "page", default=1)
    filters = [
        (Reminder.chat_id == chat.id),
        # TODO: –ù—É–∂–Ω–æ –ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ user_id? –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–¥–µ—Ç –≤ chat
        (Reminder.user_id == update.effective_user.id),
    ]

    reminder: Reminder | None = Reminder.get_by_page(page=page, filters=filters)
    if not reminder:
        message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ—Ç", quote=True)
        return

    total = Reminder.count(filters)
    pattern = PATTERN_REMINDER_PAGE

    paginator = InlineKeyboardPaginator(
        page_count=total,
        current_page=page,
        data_pattern=fill_string_pattern(pattern, "{page}"),
    )

    paginator.add_before(
        InlineKeyboardButton(
            text=INLINE_BUTTON_TEXT_DELETE,
            callback_data=fill_string_pattern(PATTERN_DELETE, reminder.id),
        ),
    )

    reply_markup: str | None = paginator.markup

    # Fix error: "telegram.error.BadRequest: Message is not modified"
    if query and is_equal_inline_keyboards(reply_markup, query.message.reply_markup):
        return

    try:
        send_reminder(
            bot=context.bot,
            chat=chat,
            reminder=reminder,
            message_id=message.message_id,
            reply_markup=reply_markup,
            as_new_message=query is None,
        )
    except BadRequest as e:
        if "Message is not modified" in str(e):
            return

        raise e


@log_func(log)
def on_start(update: Update, _: CallbackContext):
    update.effective_message.reply_markdown(
        prepare_text(
            """
–í–≤–µ–¥–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–ª–∏ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã `/add "–í—Å—Ç—Ä–µ—á–∞" —Å–µ–≥–æ–¥–Ω—è –≤ 18:00`, –Ω–∞–ø—Ä–∏–º–µ—Ä:
- `–ù–∞–ø–æ–º–Ω–∏ –æ "üçï" 10 —Ñ–µ–≤—Ä–∞–ª—è`
- `"–î–ù–°" 10 —Ñ–µ–≤—Ä–∞–ª—è –≤ 14:55`
- `–ù–∞–ø–æ–º–Ω–∏ –æ "–ü–æ–∫—É–ø–∫–∏" —Å–µ–≥–æ–¥–Ω—è`
- `–ù–∞–ø–æ–º–Ω–∏ –æ "–ü–æ–∫—É–ø–∫–∏" –∑–∞–≤—Ç—Ä–∞ –≤ 12:00`
- `–ù–∞–ø–æ–º–Ω–∏ –æ "–ü–æ–∫—É–ø–∫–∏" –≤ —Å–ª–µ–¥—É—é—â—É—é —Å—É–±–±–æ—Ç—É`
- `–ù–∞–ø–æ–º–Ω–∏ –æ "üçï" –≤ —á–µ—Ç–≤–µ—Ä–≥ –≤ 12:00. –ü–æ–≤—Ç–æ—Ä –∫–∞–∂–¥—ã–π —á–µ—Ç–≤–µ—Ä–≥`
- `–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è "xxx" 10 —Ñ–µ–≤—Ä–∞–ª—è 2027 –≥–æ–¥–∞ –≤ 14:55. –ü–æ–≤—Ç–æ—Ä –∫–∞–∂–¥—ã–π –¥–µ–Ω—å`
- `–ü—Ä–∞–∑–¥–Ω–∏–∫ "xxx" 10 —Ñ–µ–≤—Ä–∞–ª—è. –ü–æ–≤—Ç–æ—Ä –∫–∞–∂–¥—ã–π –≥–æ–¥`
- `–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è "^_^" 10 —Ñ–µ–≤—Ä–∞–ª—è. –ü–æ–≤—Ç–æ—Ä —Ä–∞–∑ –≤ –≥–æ–¥. –ù–∞–ø–æ–º–Ω–∏—Ç—å –∑–∞ –º–µ—Å—è—Ü, –∑–∞ –Ω–µ–¥–µ–ª—é, –∑–∞ 3 –¥–Ω—è, –∑–∞ –¥–µ–Ω—å`

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –Ω–∞–ø–∏—à–∏—Ç–µ: `—Å–ø–∏—Å–æ–∫` –∏–ª–∏ /list.

–ß—Ç–æ–±—ã –±–æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–ª —Å –¥–∞—Ç–∞–º–∏, –Ω—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.
–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞:
- /tz - –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
- /tz <—á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ IANA –∏–ª–∏ +-—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã> - –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä:
  - `/tz Europe/Moscow`
  - `/tz +03:00`
        """
        ),
        quote=True,
    )


@log_func(log)
def on_tz(update: Update, context: CallbackContext):
    chat = Chat.get_from(update.effective_chat)
    message = update.effective_message

    context_value: str | None = get_context_value(context)
    if context_value:
        is_set: bool = True
        value: str = context_value
    else:
        is_set: bool = False
        value: str = chat.tz

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    tz_chat: tzinfo = get_tz(value)

    dt_utc: datetime = datetime.utcnow()
    dt: datetime = convert_tz(
        dt=dt_utc,
        from_tz=timezone.utc,
        to_tz=tz_chat,
    )
    date_info: str = (
        f"\n–í—Ä–µ–º—è: {datetime_to_str(dt)}\n–í—Ä–µ–º—è –≤ UTC: {datetime_to_str(dt_utc)}"
    )

    if is_set:
        if chat.tz == value:
            message.reply_markdown(
                text=prepare_text(
                    f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å `{value}` —É–∂–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n{date_info}"
                ),
                quote=True,
            )
            return

        chat.tz = value
        chat.save()

        message.reply_markdown(
            text=prepare_text(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å `{value}`.\n{date_info}"),
            quote=True,
        )
        return

    message.reply_markdown(
        text=prepare_text(f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å `{value}`.\n{date_info}"),
        quote=True,
    )


def add_reminder(command: str, update: Update):
    log.debug(f"Command: {command!r}")

    message = update.effective_message

    if not command:
        message.reply_text(
            text=prepare_text(
                "‚ÑπÔ∏è –ü—É—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞!\n"
                "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É.\n"
                "–ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ /help"
            ),
            quote=True,
        )
        return

    chat = Chat.get_from(update.effective_chat)
    tz_chat: tzinfo = get_tz(chat.tz)

    now_utc: datetime = datetime.utcnow()

    # –í—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    now_dt_chat: datetime = convert_tz(
        dt=now_utc,
        from_tz=timezone.utc,
        to_tz=tz_chat,
    )

    defaults = Defaults(hours=10, minutes=0)

    try:
        parse_result: ParseResult = parse_command(
            command, dt=now_dt_chat, defaults=defaults
        )
    except Exception as e:
        log.exception("Error on parse_command:")
        message.reply_html(
            text=prepare_text(
                f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É!\n"
                f"–ü—Ä–∏—á–∏–Ω–∞:\n{get_blockquote_html(str(e))}"
            ),
            quote=True,
        )
        return

    target_datetime: datetime = parse_result.target_datetime

    target_datetime_utc: datetime = convert_tz(
        dt=target_datetime,
        from_tz=tz_chat,
        to_tz=timezone.utc,
    )

    # –°–ª–µ–¥—É—é—â–∞—è –¥–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
    try:
        next_send_datetime_utc: datetime = get_nearest_datetime(
            target_dt=target_datetime_utc,
            repeat_before=parse_result.repeat_before,
            dt=now_utc,
        )
    except Exception as e:
        log.exception("Error on cals_next_send_datetime_utc:")
        message.reply_html(
            text=prepare_text(
                f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É!\n"
                f"–ü—Ä–∏—á–∏–Ω–∞:\n{get_blockquote_html(str(e))}"
            ),
            quote=True,
        )
        return

    # TODO: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç –∫–æ–º–∞–Ω–¥—ã
    reminder = Reminder.add(
        original_message_id=message.message_id,
        original_message_text=message.text,
        target=parse_result.target,
        target_datetime_utc=target_datetime_utc,
        next_send_datetime_utc=next_send_datetime_utc,
        repeat_every=parse_result.repeat_every,
        repeat_before=parse_result.repeat_before,
        user=User.get_from(update.effective_user),
        chat=Chat.get_from(update.effective_chat),
    )

    next_send_datetime: datetime = reminder.get_next_send_datetime()

    # TODO: –î—É–±–ª–∏—Ä—É–µ—Ç send_reminder
    lines: list[str] = [
        f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {datetime_to_str(target_datetime)}"
        f" (–≤ UTC {datetime_to_str(target_datetime_utc)})",
        f"–ë–ª–∏–∂–∞–π—à–µ–µ: {datetime_to_str(next_send_datetime)} (–≤ UTC {datetime_to_str(next_send_datetime_utc)})",
        f"–ü–æ–≤—Ç–æ—Ä: {parse_result.repeat_every.get_value() if parse_result.repeat_every else '–Ω–µ—Ç'}",
    ]

    if not parse_result.repeat_before:
        lines.append("–ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    else:
        lines.append("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")

        for time_unit in parse_result.repeat_before:
            prev_dt = time_unit.get_prev_datetime(parse_result.target_datetime)
            prev_dt_utc = convert_tz(
                dt=prev_dt,
                from_tz=tz_chat,
                to_tz=timezone.utc,
            )
            lines.append(
                f"    {time_unit.get_value()}: {prev_dt} (–≤ UTC {datetime_to_str(prev_dt_utc)})"
            )

    message.reply_text(
        text="\n".join(lines),
        reply_markup=InlineKeyboardMarkup.from_button(
            InlineKeyboardButton(
                text=INLINE_BUTTON_TEXT_DELETE,
                callback_data=fill_string_pattern(PATTERN_DELETE, reminder.id),
            ),
        ),
        quote=True,
    )


@log_func(log)
def on_add(update: Update, context: CallbackContext):
    add_reminder(
        command=get_context_value(context),
        update=update,
    )


@log_func(log)
def on_request(update: Update, _: CallbackContext):
    add_reminder(
        command=update.effective_message.text,
        update=update,
    )


@log_func(log)
def on_get_reminders(update: Update, context: CallbackContext):
    get_reminders(update, context)


@log_func(log)
def on_change_reminder_page(update: Update, context: CallbackContext):
    get_reminders(update, context)


@log_func(log)
def on_reminder_delete(update: Update, context: CallbackContext):
    query = update.callback_query
    if query:
        query.answer()

    message = update.effective_message
    reminder_id: int = get_int_from_match(context.match, "id")

    reminder: Reminder | None = Reminder.get_or_none(id=reminder_id)
    if not reminder:
        message.reply_text("‚ö† –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–∂–µ –Ω–µ—Ç", quote=True)
        return

    reminder.delete_instance()

    message.reply_markdown(
        # TODO: –ú–± –≤—ã–≤–µ—Å—Ç–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ?
        text=prepare_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ!"),
        quote=True,
    )


# TODO:
# @log_func(log)
# def on_callback_delete_message(update: Update, _: CallbackContext):
#     query = update.callback_query
#
#     try:
#         query.delete_message()
#     except BadRequest as e:
#         if "Message can't be deleted for everyone" in str(e):
#             text = "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç.–∫. –æ–Ω–æ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ. –û—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤—Ä—É—á–Ω—É—é –µ–≥–æ —É–¥–∞–ª–∏—Ç—å"
#         else:
#             text = f"–ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {str(e)!r}"
#
#         query.answer(
#             text=text,
#             show_alert=True,
#         )
#         return
#
#     query.answer()


def on_error(update: Update, context: CallbackContext):
    reply_error(log, update, context)


def setup(dp: Dispatcher):
    dp.add_handler(CommandHandler(COMMAND_START, on_start))
    dp.add_handler(CommandHandler(COMMAND_HELP, on_start))

    dp.add_handler(CommandHandler(COMMAND_TZ, on_tz))

    dp.add_handler(CommandHandler(COMMAND_LIST, on_get_reminders))
    dp.add_handler(MessageHandler(Filters.regex(PATTERN_LIST), on_get_reminders))

    # TODO:
    # dp.add_handler(
    #     CallbackQueryHandler(on_callback_delete_message, pattern=PATTERN_DELETE_MESSAGE)
    # )
    dp.add_handler(
        CallbackQueryHandler(on_change_reminder_page, pattern=PATTERN_REMINDER_PAGE)
    )

    dp.add_handler(CallbackQueryHandler(on_reminder_delete, pattern=PATTERN_DELETE))

    dp.add_handler(CommandHandler(COMMAND_ADD, on_add))
    dp.add_handler(MessageHandler(Filters.text, on_request))

    dp.add_error_handler(on_error)
